################################
# INSTALL AND CONFIGURE CHRONY #
################################

- name: Install Chrony
  become: true
  ansible.builtin.apt:
    name: chrony

- name: Set pool address
  become: true
  ansible.builtin.lineinfile:
    path: /etc/chrony/chrony.conf
    regexp: '^pool .* iburst$'
    line: pool time.cloudflare.com iburst

- name: Set "allow all" to allow access from clients
  become: true
  ansible.builtin.lineinfile:
    path: /etc/chrony/chrony.conf
    line: allow all
  register: chrony_config

- name: Restart Chrony systemd unit
  become: true
  ansible.builtin.systemd:
    name: chrony
    enabled: true
    state: restarted
  when: chrony_config.changed


####################
# JUSTBOOM DAC HAT #
####################

- name: Disable default audio configuration in config.txt for the JustBoom DAC HAT
  become: true
  ansible.builtin.lineinfile:
    path: /boot/config.txt
    line: dtparam=audio=on
    state: absent

- name: Enable JustBoom DAC HAT audio configuration
  become: true
  ansible.builtin.blockinfile:
    path: /boot/config.txt
    block: |
      dtparam=audio=off
      dtoverlay=justboom-dac
    marker: "# {mark} ANSIBLE MANAGED JUSTBOOM CONFIGURATION"
  register: dac_overlay

- name: Reboot if the DAC HAT overlay has changed
  become: true
  ansible.builtin.reboot:
  when: dac_overlay.changed
  notify: Reboot system


#########################################
# SHAIRPORT-SYNC AND NQPTP DEPENDENCIES #
#########################################

- name: Install shairport-sync and nqptp dependencies
  become: true
  ansible.builtin.apt:
    pkg:
      - build-essential
      - autoconf
      - automake
      - libtool
      - libpopt-dev
      - libconfig-dev
      - libasound2-dev
      - avahi-daemon
      - libavahi-client-dev
      - libssl-dev
      - libsoxr-dev
      - libplist-dev
      - libsodium-dev
      - libavutil-dev
      - libavcodec-dev
      - libavformat-dev
      - uuid-dev
      - libgcrypt-dev
      - xxd

#########
# NQPTP #
#########

- name: Clone NQPTP
  ansible.builtin.git:
    repo: https://github.com/mikebrady/nqptp.git
    dest: "{{ source_dir }}/nqptp"
    version: "{{ nqptp_version }}"

- name: NQPTP autoreconf
  ansible.builtin.command: autoreconf -fi
  args:
    chdir: "{{ source_dir }}/nqptp"

- name: NQPTP configure
  ansible.builtin.command: ./configure --with-systemd-startup
  args:
    chdir: "{{ source_dir }}/nqptp"

- name: NQPTP make
  ansible.builtin.command: make
  args:
    chdir: "{{ source_dir }}/nqptp"

- name: NQPTP make install
  become: true
  ansible.builtin.command: make install
  args:
    chdir: "{{ source_dir }}/nqptp"

- name: Enable and start NQPTP
  become: true
  ansible.builtin.systemd:
    name: nqptp
    enabled: true
    state: started


##################
# SHAIRPORT SYNC #
##################

- name: Clone shairport-sync
  ansible.builtin.git:
    repo: https://github.com/mikebrady/shairport-sync.git
    dest: "{{ source_dir }}/shairport-sync"
    version: "{{ shairport_sync_version }}"

- name: shairport-sync autoreconf
  ansible.builtin.command: autoreconf -fi
  args:
    chdir: "{{ source_dir }}/shairport-sync"

- name: shairport-sync configure
  ansible.builtin.command:
    argv:
      - ./configure
      - --sysconfdir=/etc
      - --with-alsa
      - --with-soxr
      - --with-avahi
      - --with-ssl=openssl
      - --with-systemd
      - --with-airplay-2
  args:
    chdir: "{{ source_dir }}/shairport-sync"

- name: shairport-sync make
  ansible.builtin.command: make
  args:
    chdir: "{{ source_dir }}/shairport-sync"

- name: shairport-sync make install
  become: true
  ansible.builtin.command: make install
  args:
    chdir: "{{ source_dir }}/shairport-sync"

- name: Enable and start shairport-sync
  become: true
  ansible.builtin.systemd:
    name: shairport-sync
    enabled: true
    state: started


#############
# MOSQUITTO #
#############

- name: Clone Mosquitto repository
  ansible.builtin.git:
    repo: git@bitbucket.org:VirtualWolfCo/mosquitto.git
    dest: "{{ source_dir }}/mosquitto"

- name: Add Mosquitto configuration
  ansible.builtin.template:
    src: templates/mosquitto-config.j2
    dest: "{{ source_dir }}/mosquitto/{{ mosquitto_remote_username}}/mosquitto/config/conf.d/bridge.conf"

- name: Create data directory
  ansible.builtin.file:
    path: "{{ source_dir }}/mosquitto/{{ mosquitto_remote_username }}/mosquitto/data"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"

- name: Create log directory
  ansible.builtin.file:
    path: "{{ source_dir }}/mosquitto/{{ mosquitto_remote_username }}/mosquitto/log"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"

- name: Start Mosquitto
  become: true
  community.docker.docker_compose:
    project_src: "{{ source_dir }}/mosquitto/{{ mosquitto_remote_username}}"
    build: true


##################################
# POWERWALL TO PVOUTPUT UPLOADER #
##################################

- name: Clone powerwall-to-pvoutput-uploader repository
  ansible.builtin.git:
    repo: "https://github.com/VirtualWolf/powerwall-to-pvoutput-uploader.git"
    dest: "{{ source_dir }}/powerwall-to-pvoutput-uploader"

- name: Add powerwall-to-pvoutput-uploader configuration
  ansible.builtin.template:
    src: templates/powerwall-to-pvoutput-uploader-config.j2
    dest: "{{ source_dir }}/powerwall-to-pvoutput-uploader/.env"

- name: Start powerwall-to-pvoutput-uploader
  become: true
  community.docker.docker_compose:
    project_src: "{{ source_dir }}/powerwall-to-pvoutput-uploader"
    build: true


#####################
# PI HOME DASHBOARD #
#####################

- name: Clone pi-home-dashboard repository
  ansible.builtin.git:
    repo: "https://github.com/VirtualWolf/pi-home-dashboard.git"
    dest: "{{ source_dir }}/pi-home-dashboard"

- name: Add pi-home-dashboard configuration
  ansible.builtin.template:
    src: templates/pi-home-dashboard-config.j2
    dest: "{{ source_dir }}/pi-home-dashboard/config.json"

- name: Start pi-home-dashboard
  become: true
  community.docker.docker_compose:
    project_src: "{{ source_dir }}/pi-home-dashboard"
    build: true

- name: Configure crontab to turn displays on
  ansible.builtin.cron:
    name: Turn displays on
    minute: "0"
    hour: "8"
    job: "curl -X POST http://{{ ansible_hostname }}/api/hyperpixel -H 'Content-Type: application/json' -d '{\"is_on\": true}'"

- name: Configure crontab to turn displays off
  ansible.builtin.cron:
    name: Turn displays off
    minute: "0"
    hour: "0"
    job: "curl -X POST http://{{ ansible_hostname }}/api/hyperpixel -H 'Content-Type: application/json' -d '{\"is_on\": false}'"
